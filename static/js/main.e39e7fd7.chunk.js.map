{"version":3,"sources":["components/Button.js","App.js","components/Screen.js","serviceWorker.js","index.js"],"names":["Button","handleClickParent","props","handleClick","name","id","this","onClick","className","Component","App","state","currentNumber","operatorFlag","multiOperator","decimalFlag","buttonName","charAt","length","setState","newNum","slice","eval","evaled","Screen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e39e7fd7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Button extends Component {\r\n  handleClickParent = () => {\r\n    this.props.handleClick(this.props.name);\r\n  };\r\n  render() {\r\n    return (\r\n      <button\r\n        id={this.props.id}\r\n        onClick={this.handleClickParent}\r\n        className=\"button\"\r\n      >\r\n        {this.props.name}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Button;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Screen from \"./components/Screen\";\nimport Button from \"./components/Button\";\n\nclass App extends Component {\n  state = {\n    currentNumber: \"0\",\n    operatorFlag: false,\n    multiOperator: false,\n    decimalFlag: false\n  };\n  handleClick = buttonName => {\n    let currentNumber = this.state.currentNumber;\n    let operatorFlag = this.state.operatorFlag;\n    let multiOperator = this.state.multiOperator;\n    switch (true) {\n      case buttonName === \"0\" ||\n        buttonName === \"1\" ||\n        buttonName === \"2\" ||\n        buttonName === \"3\" ||\n        buttonName === \"4\" ||\n        buttonName === \"5\" ||\n        buttonName === \"6\" ||\n        buttonName === \"7\" ||\n        buttonName === \"8\" ||\n        buttonName === \"9\":\n        if (this.state.currentNumber !== \"0\") {\n          currentNumber += buttonName;\n          operatorFlag = false;\n        } else {\n          currentNumber = buttonName;\n        }\n        break;\n      case buttonName === \"+\" ||\n        buttonName === \"-\" ||\n        buttonName === \"*\" ||\n        buttonName === \"/\":\n        if (!this.state.operatorFlag) {\n          currentNumber += buttonName;\n          operatorFlag = true;\n          this.setState({ decimalFlag: false });\n        } else if (\n          this.state.operatorFlag &&\n          buttonName === \"-\" &&\n          currentNumber.charAt(currentNumber.length - 1) !== \"-\"\n        ) {\n          currentNumber += buttonName;\n          multiOperator = true;\n          this.setState({ decimalFlag: false });\n        } else if (\n          this.state.operatorFlag &&\n          currentNumber.charAt(currentNumber.length - 1) === \"-\"\n        ) {\n          let newNum = currentNumber.slice(0, currentNumber.length - 2);\n          currentNumber = newNum;\n          currentNumber += buttonName;\n          this.setState({ decimalFlag: false });\n        }\n        break;\n      case buttonName === \"C\":\n        currentNumber = \"0\";\n        operatorFlag = false;\n        this.setState({ decimalFlag: false });\n        break;\n      case buttonName === \"=\":\n        currentNumber = eval(currentNumber);\n        operatorFlag = false;\n        this.setState({ decimalFlag: true });\n        this.setState({ evaled: true });\n        break;\n      case buttonName === \".\":\n        if (!this.state.decimalFlag) {\n          currentNumber += \".\";\n          this.setState({ decimalFlag: true });\n        }\n    }\n    this.setState({ operatorFlag });\n    this.setState({ currentNumber });\n  };\n  render() {\n    return (\n      <div id=\"grid\">\n        <Screen currentNumber={this.state.currentNumber} />\n        <Button id=\"zero\" name=\"0\" handleClick={this.handleClick} />\n        <Button id=\"one\" name=\"1\" handleClick={this.handleClick} />\n        <Button id=\"two\" name=\"2\" handleClick={this.handleClick} />\n        <Button id=\"three\" name=\"3\" handleClick={this.handleClick} />\n        <Button id=\"four\" name=\"4\" handleClick={this.handleClick} />\n        <Button id=\"five\" name=\"5\" handleClick={this.handleClick} />\n        <Button id=\"six\" name=\"6\" handleClick={this.handleClick} />\n        <Button id=\"seven\" name=\"7\" handleClick={this.handleClick} />\n        <Button id=\"eight\" name=\"8\" handleClick={this.handleClick} />\n        <Button id=\"nine\" name=\"9\" handleClick={this.handleClick} />\n        <Button id=\"add\" name=\"+\" handleClick={this.handleClick} />\n        <Button id=\"subtract\" name=\"-\" handleClick={this.handleClick} />\n        <Button id=\"multiply\" name=\"*\" handleClick={this.handleClick} />\n        <Button id=\"divide\" name=\"/\" handleClick={this.handleClick} />\n        <Button id=\"equals\" name=\"=\" handleClick={this.handleClick} />\n        <Button id=\"decimal\" name=\".\" handleClick={this.handleClick} />\n        <Button id=\"clear\" name=\"C\" handleClick={this.handleClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\r\nimport \"./Screen.css\";\r\nclass Screen extends Component {\r\n  render() {\r\n    return <div id=\"display\">{this.props.currentNumber}</div>;\r\n  }\r\n}\r\n\r\nexport default Screen;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}